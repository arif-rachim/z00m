{"version":3,"sources":["AppContext.js","comp/LoginScreen.js","comp/HomeScreen.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","reducer","state","action","newState","type","userLoggedIn","AppContextProvider","children","useReducer","dispatch","Provider","value","LoginScreen","useContext","style","height","background","border","borderRadius","display","flexDirection","onClick","event","id","version","viewBox","d","stroke","fill","fill-rule","textAlign","fontSize","marginBottom","HomeScreen","videoRef","useRef","useEffect","a","navigator","mediaDevices","getUserMedia","audio","video","stream","current","srcObject","position","transition","ref","boxShadow","overflow","autoPlay","playsInline","App","className","alignItems","justifyContent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2KAEaA,EAAaC,IAAMC,cAAc,IAS9C,SAASC,EAAQC,EAAMC,GACnB,IAAMC,EAAQ,eAAOF,GACrB,OAAOC,EAAOE,MACV,IAAK,QACDD,EAASE,cAAe,EAGhC,OAAOF,EAQI,SAASG,EAAT,GAAwC,IAAXC,EAAU,EAAVA,SAAU,EACzBC,qBAAWR,EAAQ,IADM,mBAC3CC,EAD2C,KACrCQ,EADqC,KAGlD,OAAO,kBAACZ,EAAWa,SAAZ,CAAqBC,MAAO,CAACV,QAAMQ,aACrCF,EAASN,ICtBH,SAASW,IAAc,IAC3BH,EAAYI,qBAAWhB,GAAvBY,SACP,OAAO,yBAAKK,MAAO,CAACC,OAAQ,QAAQC,WAAW,kBAAkBC,OAAO,gCAAgCC,aAAa,OACjHC,QAAQ,OAAOC,cAAc,UAAWC,QAAS,SAACC,GAAD,OAAWb,EAAS,CAACL,KAAK,YAC3E,yBAAKmB,GAAG,MAAMC,QAAQ,MAAMC,QAAQ,8BAA8BV,OAAQ,QACtE,2BACI,0BACIW,EAAE,otHACFC,OAAO,OAAOC,KAAK,UAAUC,YAAU,cAGnD,2BAAOf,MAAO,CAACgB,UAAU,SAASC,SAAS,SAA3C,QACA,2BAAOjB,MAAO,CAACgB,UAAU,SAASE,aAAa,OAAOD,SAAS,SAA/D,kB,2BCfO,SAASE,IACpB,IAAMC,EAAWC,mBAUjB,OATAC,qBAAU,WACN,sBAAC,4BAAAC,EAAA,sEACwBC,UAAUC,aAAaC,aAAa,CACrDC,OAAO,EACPC,OAAO,IAHd,OACSC,EADT,OAKGT,EAASU,QAAQC,UAAYF,EALhC,0CAAD,KAOF,IACK,6BACH,yBAAK7B,MAAO,CAACgC,SAAS,WAAWC,WAAW,4BACxC,2BAAOC,IAAKd,EAAUpB,MAAO,CAACI,aAAa,OAAOD,OAAO,oBAAoBgC,UAAU,iCAAiCC,SAAS,UAAWC,UAAU,EAAMC,aAAa,MCMtKC,MAbf,WACI,OACI,kBAAC/C,EAAD,MACK,SAACL,GAAD,OACD,yBAAKqD,UAAU,OACX,yBAAKxC,MAAO,CAACK,QAAS,OAAQC,cAAe,SAAUmC,WAAY,SAASC,eAAe,SAASzC,OAAO,SACtGd,EAAMI,aAAe,kBAAC4B,EAAD,MAAiB,kBAACrB,EAAD,YCLvC6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB5B,WACrBA,UAAU6B,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.12e752d3.chunk.js","sourcesContent":["import React, {useReducer} from \"react\";\r\n\r\nexport const AppContext = React.createContext({});\r\n\r\n/**\r\n * Reducer contains the logic of this application. Reducer accepts two parameters.\r\n * The first parameter is state, and the second is action.\r\n * The state is the n-1 state object, while the action is the event triggered by the producer.\r\n * @param state\r\n * @param action\r\n */\r\nfunction reducer(state,action){\r\n    const newState = {...state};\r\n    switch(action.type){\r\n        case 'login' : {\r\n            newState.userLoggedIn = true;\r\n        }\r\n    }\r\n    return newState;\r\n}\r\n\r\n/**\r\n * AppContextProvider contains an object that will be rendered as a React component.\r\n * AppContextProvider will delegate under its context value.\r\n * The context value of AppContextProvider is currently the state and dispatch function.\r\n */\r\nexport default function AppContextProvider({children}){\r\n    const [state,dispatch] = useReducer(reducer,{});\r\n\r\n    return <AppContext.Provider value={{state,dispatch}}>\r\n        {children(state)}\r\n    </AppContext.Provider>\r\n}\r\n","import React, {useContext} from 'react';\r\nimport {AppContext} from \"../AppContext\";\r\n\r\n/**\r\n * The login screen is the first page that users will see if they have never logged in.\r\n * @returns {*}\r\n * @constructor\r\n */\r\nexport default function LoginScreen(){\r\n    const {dispatch} = useContext(AppContext);\r\n    return <div style={{height: '20rem',background:'rgba(0,0,0,0.5)',border:'5px solid rgba(251,204,7,0.8)',borderRadius:'1rem',\r\n        display:'flex',flexDirection:'column'}} onClick={(event) => dispatch({type:'login'})}>\r\n        <svg id=\"svg\" version=\"1.1\" viewBox=\"0, 0, 400,486.3157894736842\" height={'100%'}>\r\n            <g>\r\n                <path\r\n                    d=\"M175.600 46.479 C 171.783 47.057,168.474 48.385,165.980 50.341 C 164.675 51.363,162.907 52.679,162.049 53.264 C 158.745 55.519,151.600 66.657,151.600 69.551 C 151.600 72.312,154.437 73.752,157.344 72.466 C 159.190 71.649,159.323 71.480,164.142 63.800 C 170.493 53.680,180.835 52.599,193.000 60.783 C 193.880 61.375,196.573 62.904,198.983 64.182 C 201.394 65.459,204.837 67.462,206.634 68.633 C 213.161 72.888,221.693 76.946,227.316 78.470 C 228.902 78.900,230.920 79.446,231.800 79.684 C 234.388 80.384,243.407 80.269,246.200 79.500 C 247.520 79.137,249.507 78.642,250.615 78.401 C 251.723 78.159,253.640 77.295,254.876 76.481 C 256.111 75.666,258.175 74.302,259.461 73.450 C 267.219 68.309,271.495 61.957,269.032 59.235 C 267.392 57.423,263.625 58.229,261.406 60.866 C 260.440 62.013,258.288 63.705,253.607 66.995 C 247.458 71.317,240.577 72.771,231.800 71.603 C 226.062 70.839,211.132 63.344,204.739 58.017 C 202.286 55.974,187.416 47.949,186.152 47.987 C 185.906 47.994,184.646 47.666,183.352 47.258 C 180.237 46.275,178.261 46.076,175.600 46.479 M131.800 114.385 C 91.001 114.648,94.599 114.346,86.630 118.177 C 80.190 121.273,77.201 124.890,74.315 133.077 L 73.073 136.600 72.885 167.436 C 72.656 204.690,72.472 203.330,77.384 200.635 C 78.823 199.846,81.193 198.546,82.652 197.746 L 85.303 196.292 91.552 196.119 C 94.988 196.024,152.520 195.908,219.400 195.862 C 286.280 195.815,341.378 195.633,341.841 195.457 C 344.657 194.387,344.187 189.968,340.434 182.238 C 339.110 179.510,337.680 176.406,337.255 175.339 C 336.831 174.273,335.817 171.870,335.003 170.000 C 334.189 168.130,333.165 165.453,332.728 164.052 C 332.291 162.651,330.778 159.079,329.367 156.115 C 327.955 153.151,326.800 150.658,326.800 150.575 C 326.800 150.282,324.771 145.777,323.839 144.000 C 323.319 143.010,322.758 141.750,322.592 141.200 C 322.426 140.650,321.869 139.277,321.356 138.149 C 320.842 137.022,319.805 134.592,319.052 132.749 C 313.617 119.458,311.969 116.428,309.446 115.084 L 307.800 114.207 237.800 114.180 C 199.300 114.165,151.600 114.257,131.800 114.385 M347.051 225.112 C 346.420 225.195,345.020 225.883,343.940 226.642 C 342.078 227.951,339.608 229.027,334.200 230.886 C 331.127 231.942,324.912 231.963,209.600 231.312 C 72.522 230.538,76.001 230.538,74.559 231.302 C 71.896 232.713,72.070 230.344,71.806 268.755 C 71.543 306.923,71.464 305.433,73.839 306.989 C 74.720 307.566,86.169 307.623,198.704 307.615 L 322.600 307.606 326.200 306.381 C 335.473 303.225,342.985 294.239,343.981 285.109 C 344.191 283.189,344.537 281.291,344.751 280.891 C 344.965 280.491,345.343 277.202,345.591 273.582 C 345.839 269.962,346.196 266.100,346.384 265.000 C 346.573 263.900,346.922 260.660,347.162 257.800 C 347.928 248.647,349.215 235.488,349.627 232.600 C 350.348 227.549,349.403 224.802,347.051 225.112 M73.762 341.242 C 72.846 342.253,72.346 398.617,73.195 405.088 C 74.776 417.131,81.955 424.781,94.400 427.686 C 97.587 428.430,306.598 428.444,309.041 427.700 C 311.279 427.019,312.539 425.742,313.508 423.170 C 313.959 421.977,315.224 419.110,316.320 416.800 C 317.416 414.490,318.875 411.250,319.563 409.600 C 320.251 407.950,321.102 406.060,321.454 405.400 C 321.806 404.740,322.693 402.551,323.427 400.536 C 325.112 395.905,326.419 392.792,328.693 388.000 C 329.684 385.910,330.733 383.570,331.022 382.800 C 332.079 379.992,334.037 375.437,334.365 375.024 C 334.550 374.791,334.834 374.150,334.994 373.600 C 335.155 373.050,336.167 370.593,337.243 368.141 C 338.319 365.689,339.200 363.578,339.200 363.451 C 339.200 363.324,340.122 361.280,341.249 358.910 C 343.675 353.806,344.236 350.471,342.937 348.869 C 341.215 346.744,347.335 346.841,211.995 346.811 C 142.909 346.795,85.995 346.628,85.332 346.438 C 84.295 346.141,78.227 342.645,75.817 340.957 C 74.780 340.230,74.663 340.247,73.762 341.242 \"\r\n                    stroke=\"none\" fill=\"#fbcc07\" fill-rule=\"evenodd\"/>\r\n            </g>\r\n        </svg>\r\n        <label style={{textAlign:'center',fontSize:'5rem'}}>z00m</label>\r\n        <label style={{textAlign:'center',marginBottom:'1rem',fontSize:'1rem'}}>Click to Join</label>\r\n    </div>\r\n}\r\n","/**\r\n * HomeScreen is a component used to render video playback from users who log into a room.\r\n * HomeScreen will be mounted by react if the user has successfully logged in.\r\n */\r\nimport React, {useEffect, useRef} from 'react';\r\nexport default function HomeScreen(){\r\n    const videoRef = useRef();\r\n    useEffect(() => {\r\n        (async () => {\r\n            const stream = await navigator.mediaDevices.getUserMedia({\r\n                audio: false,\r\n                video: true\r\n            });\r\n            videoRef.current.srcObject = stream;\r\n        })();\r\n    },[]);\r\n    return <div>\r\n        <div style={{position:'relative',transition:'all 300ms linear-in-out'}}>\r\n            <video ref={videoRef} style={{borderRadius:'1rem',border:'5px solid #FBCF14',boxShadow:'0px 5px 10px 5px rgba(0,0,0,1)',overflow:'hidden'}} autoPlay={true} playsInline={true} />\r\n        </div>\r\n    </div>\r\n}\r\n","import React from 'react';\nimport LoginScreen from \"./comp/LoginScreen\";\nimport AppContextProvider from \"./AppContext\";\nimport HomeScreen from \"./comp/HomeScreen\";\n\n/**\n * App is the main component that becomes the root of this application.\n * The App component has an AppContextProvider which will render the HomeScreen or LoginScreen component.\n * @returns {*}\n * @constructor\n */\nfunction App() {\n    return (\n        <AppContextProvider>\n            {(state) => (\n            <div className=\"App\">\n                <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center',justifyContent:'center',height:'100%'}}>\n                    {state.userLoggedIn ? <HomeScreen /> : <LoginScreen/>}\n                </div>\n            </div>)}\n        </AppContextProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}